// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: examples/proto/connectrpc/eliza/v1/eliza.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "examples/proto/connectrpc/eliza/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ElizaServiceName is the fully-qualified name of the ElizaService service.
	ElizaServiceName = "connectrpc.eliza.v1.ElizaService"
)

// ElizaServiceClient is a client for the connectrpc.eliza.v1.ElizaService service.
type ElizaServiceClient interface {
	// Say is a unary RPC. Eliza responds to the prompt with a single sentence.
	Say(context.Context, *connect_go.Request[v1.SayRequest]) (*connect_go.Response[v1.SayResponse], error)
	// Converse is a bidirectional RPC. The caller may exchange multiple
	// back-and-forth messages with Eliza over a long-lived connection. Eliza
	// responds to each ConverseRequest with a ConverseResponse.
	Converse(context.Context) *connect_go.BidiStreamForClient[v1.ConverseRequest, v1.ConverseResponse]
	// Introduce is a server streaming RPC. Given the caller's name, Eliza
	// returns a stream of sentences to introduce itself.
	Introduce(context.Context, *connect_go.Request[v1.IntroduceRequest]) (*connect_go.ServerStreamForClient[v1.IntroduceResponse], error)
	// Reflect is a client streaming RPC. Given a stream of sentences, Eliza
	// returns a single sentence that reflects the input back to the caller.
	Reflect(context.Context) *connect_go.ClientStreamForClient[v1.ReflectRequest, v1.ReflectResponse]
}

// NewElizaServiceClient constructs a client for the connectrpc.eliza.v1.ElizaService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewElizaServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ElizaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &elizaServiceClient{
		say: connect_go.NewClient[v1.SayRequest, v1.SayResponse](
			httpClient,
			baseURL+"/connectrpc.eliza.v1.ElizaService/Say",
			opts...,
		),
		converse: connect_go.NewClient[v1.ConverseRequest, v1.ConverseResponse](
			httpClient,
			baseURL+"/connectrpc.eliza.v1.ElizaService/Converse",
			opts...,
		),
		introduce: connect_go.NewClient[v1.IntroduceRequest, v1.IntroduceResponse](
			httpClient,
			baseURL+"/connectrpc.eliza.v1.ElizaService/Introduce",
			opts...,
		),
		reflect: connect_go.NewClient[v1.ReflectRequest, v1.ReflectResponse](
			httpClient,
			baseURL+"/connectrpc.eliza.v1.ElizaService/Reflect",
			opts...,
		),
	}
}

// elizaServiceClient implements ElizaServiceClient.
type elizaServiceClient struct {
	say       *connect_go.Client[v1.SayRequest, v1.SayResponse]
	converse  *connect_go.Client[v1.ConverseRequest, v1.ConverseResponse]
	introduce *connect_go.Client[v1.IntroduceRequest, v1.IntroduceResponse]
	reflect   *connect_go.Client[v1.ReflectRequest, v1.ReflectResponse]
}

// Say calls connectrpc.eliza.v1.ElizaService.Say.
func (c *elizaServiceClient) Say(ctx context.Context, req *connect_go.Request[v1.SayRequest]) (*connect_go.Response[v1.SayResponse], error) {
	return c.say.CallUnary(ctx, req)
}

// Converse calls connectrpc.eliza.v1.ElizaService.Converse.
func (c *elizaServiceClient) Converse(ctx context.Context) *connect_go.BidiStreamForClient[v1.ConverseRequest, v1.ConverseResponse] {
	return c.converse.CallBidiStream(ctx)
}

// Introduce calls connectrpc.eliza.v1.ElizaService.Introduce.
func (c *elizaServiceClient) Introduce(ctx context.Context, req *connect_go.Request[v1.IntroduceRequest]) (*connect_go.ServerStreamForClient[v1.IntroduceResponse], error) {
	return c.introduce.CallServerStream(ctx, req)
}

// Reflect calls connectrpc.eliza.v1.ElizaService.Reflect.
func (c *elizaServiceClient) Reflect(ctx context.Context) *connect_go.ClientStreamForClient[v1.ReflectRequest, v1.ReflectResponse] {
	return c.reflect.CallClientStream(ctx)
}

// ElizaServiceHandler is an implementation of the connectrpc.eliza.v1.ElizaService service.
type ElizaServiceHandler interface {
	// Say is a unary RPC. Eliza responds to the prompt with a single sentence.
	Say(context.Context, *connect_go.Request[v1.SayRequest]) (*connect_go.Response[v1.SayResponse], error)
	// Converse is a bidirectional RPC. The caller may exchange multiple
	// back-and-forth messages with Eliza over a long-lived connection. Eliza
	// responds to each ConverseRequest with a ConverseResponse.
	Converse(context.Context, *connect_go.BidiStream[v1.ConverseRequest, v1.ConverseResponse]) error
	// Introduce is a server streaming RPC. Given the caller's name, Eliza
	// returns a stream of sentences to introduce itself.
	Introduce(context.Context, *connect_go.Request[v1.IntroduceRequest], *connect_go.ServerStream[v1.IntroduceResponse]) error
	// Reflect is a client streaming RPC. Given a stream of sentences, Eliza
	// returns a single sentence that reflects the input back to the caller.
	Reflect(context.Context, *connect_go.ClientStream[v1.ReflectRequest]) (*connect_go.Response[v1.ReflectResponse], error)
}

// NewElizaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewElizaServiceHandler(svc ElizaServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/connectrpc.eliza.v1.ElizaService/Say", connect_go.NewUnaryHandler(
		"/connectrpc.eliza.v1.ElizaService/Say",
		svc.Say,
		opts...,
	))
	mux.Handle("/connectrpc.eliza.v1.ElizaService/Converse", connect_go.NewBidiStreamHandler(
		"/connectrpc.eliza.v1.ElizaService/Converse",
		svc.Converse,
		opts...,
	))
	mux.Handle("/connectrpc.eliza.v1.ElizaService/Introduce", connect_go.NewServerStreamHandler(
		"/connectrpc.eliza.v1.ElizaService/Introduce",
		svc.Introduce,
		opts...,
	))
	mux.Handle("/connectrpc.eliza.v1.ElizaService/Reflect", connect_go.NewClientStreamHandler(
		"/connectrpc.eliza.v1.ElizaService/Reflect",
		svc.Reflect,
		opts...,
	))
	return "/connectrpc.eliza.v1.ElizaService/", mux
}

// UnimplementedElizaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedElizaServiceHandler struct{}

func (UnimplementedElizaServiceHandler) Say(context.Context, *connect_go.Request[v1.SayRequest]) (*connect_go.Response[v1.SayResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("connectrpc.eliza.v1.ElizaService.Say is not implemented"))
}

func (UnimplementedElizaServiceHandler) Converse(context.Context, *connect_go.BidiStream[v1.ConverseRequest, v1.ConverseResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("connectrpc.eliza.v1.ElizaService.Converse is not implemented"))
}

func (UnimplementedElizaServiceHandler) Introduce(context.Context, *connect_go.Request[v1.IntroduceRequest], *connect_go.ServerStream[v1.IntroduceResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("connectrpc.eliza.v1.ElizaService.Introduce is not implemented"))
}

func (UnimplementedElizaServiceHandler) Reflect(context.Context, *connect_go.ClientStream[v1.ReflectRequest]) (*connect_go.Response[v1.ReflectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("connectrpc.eliza.v1.ElizaService.Reflect is not implemented"))
}
