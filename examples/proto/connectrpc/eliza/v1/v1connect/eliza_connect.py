# Generated by the protoc-gen-connect-python. DO NOT EDIT!
# source: examples/proto/connectrpc/eliza/v1/v1connect/eliza.proto
# Protobuf Python Version: v5.29.3
# protoc-gen-connect-python version: v0.0.0-20250517015031-b19a36b52499+dirty
"""Generated connect code."""

from enum import Enum

from connect.client import Client
from connect.connect import StreamRequest, StreamResponse, UnaryRequest, UnaryResponse
from connect.handler import ClientStreamHandler, Handler, ServerStreamHandler, UnaryHandler
from connect.options import ClientOptions, ConnectOptions
from connect.connection_pool import AsyncConnectionPool
from google.protobuf.descriptor import MethodDescriptor, ServiceDescriptor

from .. import eliza_pb2
from ..eliza_pb2 import SayRequest, SayResponse, ConverseRequest, ConverseResponse, IntroduceRequest, IntroduceResponse, ReflectRequest, ReflectResponse


class ElizaServiceProcedures(Enum):
    """Procedures for the ElizaService service."""

    Say = "/connectrpc.eliza.v1.ElizaService/Say"
    Converse = "/connectrpc.eliza.v1.ElizaService/Converse"
    Introduce = "/connectrpc.eliza.v1.ElizaService/Introduce"
    Reflect = "/connectrpc.eliza.v1.ElizaService/Reflect"


ElizaService_service_descriptor: ServiceDescriptor = eliza_pb2.DESCRIPTOR.services_by_name["ElizaService"]

ElizaServiceSay_method_descriptor: MethodDescriptor = ElizaService_service_descriptor.methods_by_name["Say"]
ElizaServiceConverse_method_descriptor: MethodDescriptor = ElizaService_service_descriptor.methods_by_name["Converse"]
ElizaServiceIntroduce_method_descriptor: MethodDescriptor = ElizaService_service_descriptor.methods_by_name["Introduce"]
ElizaServiceReflect_method_descriptor: MethodDescriptor = ElizaService_service_descriptor.methods_by_name["Reflect"]


class ElizaServiceClient:
    def __init__(self, base_url: str, pool: AsyncConnectionPool, options: ClientOptions | None = None) -> None:
        base_url = base_url.removesuffix("/")

        self.Say = Client[SayRequest, SayResponse](
            pool, base_url + ElizaServiceProcedures.Say.value, SayRequest, SayResponse, options
        ).call_unary
        self.Converse = Client[ConverseRequest, ConverseResponse](
            pool, base_url + ElizaServiceProcedures.Converse.value, ConverseRequest, ConverseResponse, options
        ).call_server_stream
        self.Introduce = Client[IntroduceRequest, IntroduceResponse](
            pool, base_url + ElizaServiceProcedures.Introduce.value, IntroduceRequest, IntroduceResponse, options
        ).call_server_stream
        self.Reflect = Client[ReflectRequest, ReflectResponse](
            pool, base_url + ElizaServiceProcedures.Reflect.value, ReflectRequest, ReflectResponse, options
        ).call_client_stream


class ElizaServiceHandler:
    """Handler for the elizaService service."""

    async def Say(self, request: UnaryRequest[SayRequest]) -> UnaryResponse[SayResponse]: ...

    async def Converse(self, request: StreamRequest[ConverseRequest]) -> StreamResponse[ConverseResponse]: ...

    async def Introduce(self, request: StreamRequest[IntroduceRequest]) -> StreamResponse[IntroduceResponse]: ...

    async def Reflect(self, request: StreamRequest[ReflectRequest]) -> StreamResponse[ReflectResponse]: ...


def create_ElizaService_handlers(service: ElizaServiceHandler, options: ConnectOptions | None = None) -> list[Handler]:
    handlers = [
        UnaryHandler(
            procedure=ElizaServiceProcedures.Say.value,
            unary=service.Say,
            input=SayRequest,
            output=SayResponse,
            options=options,
        ),
        ServerStreamHandler(
            procedure=ElizaServiceProcedures.Converse.value,
            stream=service.Converse,
            input=ConverseRequest,
            output=ConverseResponse,
            options=options,
        ),
        ServerStreamHandler(
            procedure=ElizaServiceProcedures.Introduce.value,
            stream=service.Introduce,
            input=IntroduceRequest,
            output=IntroduceResponse,
            options=options,
        ),
        ClientStreamHandler(
            procedure=ElizaServiceProcedures.Reflect.value,
            stream=service.Reflect,
            input=ReflectRequest,
            output=ReflectResponse,
            options=options,
        ),
    ]
    return handlers
