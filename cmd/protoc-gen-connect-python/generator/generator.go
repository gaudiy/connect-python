// Copyright 2024 Gaudiy, Inc.
// SPDX-License-Identifier: Apache-2.0

// Package generator generates connnect service for python.
package generator

import (
	"fmt"
	"path/filepath"
	"runtime/debug"
	"strconv"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/pluginpb"
)

var version = "devel"

type Config struct{}

type Generator struct {
	plugin *protogen.Plugin
	cfg    *Config
	local  map[protoreflect.FullName]bool
}

func NewGenerator(plugin *protogen.Plugin, cfg *Config) (*Generator, error) {
	plugin.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL) | uint64(pluginpb.CodeGeneratorResponse_FEATURE_SUPPORTS_EDITIONS)
	plugin.SupportedEditionsMinimum = descriptorpb.Edition_EDITION_PROTO2
	plugin.SupportedEditionsMaximum = descriptorpb.Edition_EDITION_2024

	local := make(map[protoreflect.FullName]bool)
	for _, f := range plugin.Files {
		if f.Generate {
			local[f.Desc.Package()] = true
		}
	}

	return &Generator{
		plugin: plugin,
		cfg:    cfg,
		local:  local,
	}, nil
}

func (g *Generator) Generate() {
	for _, file := range g.plugin.Files {
		if !file.Generate {
			continue
		}

		file.GoPackageName += "connect"
		generatedFilenamePrefix := filepath.ToSlash(file.GeneratedFilenamePrefix)
		file.GeneratedFilenamePrefix = filepath.Join(
			filepath.Dir(generatedFilenamePrefix),
			string(file.GoPackageName),
			filepath.Base(generatedFilenamePrefix),
		)

		// NOTE(zchee): importPath should be empty.
		importPath := protogen.GoImportPath(``)
		gf := g.plugin.NewGeneratedFile(file.GeneratedFilenamePrefix+"_connect.py", importPath)

		g.generate(gf, file)
	}
}

func protocVersion(plugin *protogen.Plugin) string {
	v := plugin.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}

	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}

	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

type RPCType int

const (
	Unary RPCType = iota
	ServerStreaming
	ClientStreaming
	BidirectionalStreaming
)

type Method struct {
	Method   string
	FullName string
	RPCType  RPCType
}

type message struct {
	*protogen.Message

	method string
}

type service struct {
	input  *message
	output *message
}

type GeneratedFile struct {
	*protogen.GeneratedFile

	services map[Method]*service
	imports  map[PythonImportPath]bool

	config        *Config
	packages      map[protoreflect.FullName]bool
	manualImports map[PythonImportPath]bool
}

func (g *Generator) generate(gen *protogen.GeneratedFile, f *protogen.File) {
	p := &GeneratedFile{
		GeneratedFile: gen,
		services:      make(map[Method]*service),
	}
	for _, svc := range f.Services {
		for _, meth := range svc.Methods {
			fullname := string(meth.Desc.FullName())
			idx := strings.LastIndex(fullname, ".")
			method := Method{
				Method:   meth.GoName,
				FullName: fullname[:idx],
			}

			// parse RPC type
			switch {
			case meth.Desc.IsStreamingServer():
				method.RPCType = ServerStreaming
			case meth.Desc.IsStreamingClient():
				method.RPCType = ClientStreaming
			case meth.Desc.IsStreamingServer() && meth.Desc.IsStreamingClient():
				method.RPCType = BidirectionalStreaming
			default:
				method.RPCType = Unary
			}

			p.services[method] = &service{
				input: &message{
					Message: meth.Input,
					method:  filepath.Base(meth.Input.GoIdent.GoName),
				},
				output: &message{
					Message: meth.Output,
					method:  filepath.Base(meth.Output.GoIdent.GoName),
				},
			}
		}
	}

	p.P(`# Generated by the protoc-gen-connect-python. DO NOT EDIT!`)
	p.P(`# source: `, f.GeneratedFilenamePrefix, `.proto`)
	p.P(`# Protobuf Python Version: `, protocVersion(g.plugin))
	if bi, ok := debug.ReadBuildInfo(); ok {
		p.P(`# protoc-gen-connect-python version: `, bi.Main.Version)
	}
	p.P(`"""Generated connect code."""`)
	p.P()
	p.P(`import abc`)
	p.P(`from enum import Enum`)
	p.P()
	p.P(`from connect.client import Client`)
	p.P(`from connect.connect import StreamRequest, StreamResponse, UnaryRequest, UnaryResponse`)
	p.P(`from connect.handler import Handler, ServerStreamHandler, UnaryHandler`)
	p.P(`from connect.options import ClientOptions, ConnectOptions`)
	p.P(`from connect.session import AsyncClientSession`)
	p.P(`from google.protobuf.descriptor import MethodDescriptor, ServiceDescriptor`)
	p.P()

	svcName := filepath.Base(f.GeneratedFilenamePrefix)
	upperSvcName := camelCase(svcName)
	svcNameService := upperSvcName + `Service`
	svcNamePB := svcName + "_pb2"
	p.P(`from `, `..`, ` import `, svcNamePB)
	var sb strings.Builder
	numSvc := len(p.services)
	if numSvc > 0 {
		fmt.Fprintln(&sb, "# TODO(zchee): duplicate imports")
		fmt.Fprintf(&sb, "from ..%s import ", svcNamePB)
	}
	i := 0
	for _, svc := range p.services {
		fmt.Fprintf(&sb, "%s, %s", svc.input.method, svc.output.method)
		if i <= numSvc-2 {
			fmt.Fprint(&sb, ", ")
		}
		i++
	}
	if numSvc > 0 {
		fmt.Fprintf(&sb, "\n")
	}
	p.P(sb.String())
	p.P()
	p.P()
	procedures := svcNameService + `Procedures`
	p.P(`class `, procedures, `(Enum):`)
	p.P(`    """Procedures for the `, svcName, ` service."""`)
	p.P()
	for meth := range p.services {
		p.P(`    `, meth.Method, ` = `, strconv.Quote(`/`+filepath.Join(meth.FullName, meth.Method)))
	}
	p.P()
	p.P()
	serviceDescriptor := svcNameService + `_service_descriptor`
	p.P(serviceDescriptor, `: `, `ServiceDescriptor`, ` = `, svcNamePB+`.DESCRIPTOR.services_by_name[`, strconv.Quote(svcNameService), `]`)
	p.P()
	for meth := range p.services {
		methodDescriptor := svcNameService + meth.Method + `_method_descriptor`
		p.P(methodDescriptor+`: `, `MethodDescriptor = `, serviceDescriptor+`.methods_by_name[`, strconv.Quote(meth.Method), `]`)
	}
	p.P()
	p.P()
	p.P(`class `, upperSvcName, `Client:`)
	p.P(`    def __init__(self, base_url: str, session: AsyncClientSession, options: ClientOptions | None = None) -> None:`)
	p.P(`        base_url = base_url.removesuffix("/")`)
	p.P()
	for meth, svc := range p.services {
		p.P(`        `, `self.`, meth.Method, ` = `, `Client[`, svc.input.method, `, `, svc.output.method, `](`)
		p.P(`            `, `session, `, `base_url + `, procedures+`.`+meth.Method+`.value, `, svc.input.method+`, `, svc.output.method, `, options`)
		switch meth.RPCType {
		case Unary:
			p.P(`        `, `).call_unary`)
		case ServerStreaming:
			p.P(`        `, `).call_server_stream`)
		case ClientStreaming:
			p.P(`        `, `).call_client_stream`)
		}
	}
	p.P()
	p.P()
	handler := svcNameService + `Handler`
	p.P(`class `, handler, `(metaclass=abc.ABCMeta):`)
	p.P(`    `, `"""Handler for the `, lowerCamelCase(upperSvcName), ` service."""`)
	p.P()
	for meth, svc := range p.services {
		sb.Reset()
		p.P(`    `, `@abc.abstractmethod`)
		fmt.Fprintf(&sb, "    async def %s(self, request: ", meth.Method)
		var (
			reqRPCType  string
			respRPCType string
		)
		// TODO(zchee): BidirectionalStreaming?
		switch meth.RPCType {
		case Unary:
			reqRPCType = `UnaryRequest`
			respRPCType = `UnaryResponse`
		case ServerStreaming, ClientStreaming:
			reqRPCType = `StreamRequest`
			respRPCType = `StreamResponse`
		}
		fmt.Fprintf(&sb, "%s[%s]) -> %s[%s]: ...", reqRPCType, svc.input.method, respRPCType, svc.output.method)
		p.P(sb.String())
	}
	p.P()
	p.P()
	p.P(`def create_`, svcNameService, `_handlers`, `(`, `service: `, handler, `, options: ConnectOptions | None = None`, `) -> list[Handler]:`)
	p.P(`    handlers = [`)
	for meth, svc := range p.services {
		var (
			rpcHandler string
			call       string
		)
		// TODO(zchee): ClientStreaming and BidirectionalStreaming?
		switch meth.RPCType {
		case Unary:
			rpcHandler = `UnaryHandler`
			call = fmt.Sprintf("            unary=service.%s,", meth.Method)
		case ServerStreaming:
			rpcHandler = `ServerStreamHandler`
			call = fmt.Sprintf("            stream=service.%s,", meth.Method)
		}

		// TODO(zchee): ClientStreaming and BidirectionalStreaming?
		if meth.RPCType == Unary || meth.RPCType == ServerStreaming {
			p.P(`        `, rpcHandler, `(`)
			p.P(`            procedure=`, procedures+`.`+meth.Method+`.value,`)
			p.P(call)
			p.P(`            input=`, svc.input.method, `,`)
			p.P(`            output=`, svc.output.method, `,`)
			p.P(`            options=options,`)
			p.P(`        ),`)
		}
	}
	p.P(`    ]`)
	p.P(`    return handlers`)
}

func lowerCamelCase(s string) string {
	if len(s) == 0 {
		return s
	}
	if isASCIIUpper(s[0]) {
		// convert uppercase to lowercase
		s = string(s[0]-'A'+'a') + s[1:]
	}
	return s
}

// camelCase camel-cases a protobuf name for use as a Go identifier.
func camelCase(s string) string {
	// Invariant: if the next letter is lower case, it must be converted
	// to upper case.
	// That is, we process a word at a time, where words are marked by _ or
	// upper case letter. Digits are treated as words.
	var b []byte
	for i := 0; i < len(s); i++ {
		c := s[i]
		switch {
		case c == '.' && i+1 < len(s) && isASCIILower(s[i+1]):
			// Skip over '.' in ".{{lowercase}}".
		case c == '.':
			b = append(b, '_') // convert '.' to '_'
		case c == '_' && (i == 0 || s[i-1] == '.'):
			// Convert initial '_' to ensure we start with a capital letter.
			// Do the same for '_' after '.' to match historic behavior.
			b = append(b, 'X') // convert '_' to 'X'
		case c == '_' && i+1 < len(s) && isASCIILower(s[i+1]):
			// Skip over '_' in "_{{lowercase}}".
		case isASCIIDigit(c):
			b = append(b, c)
		default:
			// Assume we have a letter now - if not, it's a bogus identifier.
			// The next word is a sequence of characters that must start upper case.
			if isASCIILower(c) {
				c -= 'a' - 'A' // convert lowercase to uppercase
			}
			b = append(b, c)

			// Accept lower case sequence that follows.
			for ; i+1 < len(s) && isASCIILower(s[i+1]); i++ {
				b = append(b, s[i+1])
			}
		}
	}
	return string(b)
}

func isASCIIUpper(c byte) bool {
	return 'A' <= c && c <= 'Z'
}

func isASCIILower(c byte) bool {
	return 'a' <= c && c <= 'z'
}

func isASCIIDigit(c byte) bool {
	return '0' <= c && c <= '9'
}
