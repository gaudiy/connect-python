# Generated by the protoc-gen-connect-python. DO NOT EDIT!
# source: examples/proto/connectrpc/eliza/v1/v1connect/eliza.proto
# Protobuf Python Version: v5.29.3
# protoc-gen-connect-python version: v0.0.0-20250225082729-4cfb74729a2c
"""Generated connect code."""

from enum import Enum

from connect.client import Client
from connect.connect import StreamRequest, StreamResponse, UnaryRequest, UnaryResponse
from connect.handler import ClientStreamHandler, Handler, ServerStreamHandler, UnaryHandler
from connect.options import ClientOptions, ConnectOptions
from connect.session import AsyncClientSession
from google.protobuf.descriptor import MethodDescriptor, ServiceDescriptor

from .. import eliza_pb2
from ..eliza_pb2 import SayRequest, SayResponse, ConverseRequest, ConverseResponse, IntroduceRequest, IntroduceResponse


class ElizaServiceProcedures(Enum):
    """Procedures for the eliza service."""

    Say = "/connectrpc.eliza.v1.ElizaService/Say"
    Converse = "/connectrpc.eliza.v1.ElizaService/Converse"
    IntroduceServer = "/connectrpc.eliza.v1.ElizaService/IntroduceServer"
    IntroduceClient = "/connectrpc.eliza.v1.ElizaService/IntroduceClient"


ElizaService_service_descriptor: ServiceDescriptor = eliza_pb2.DESCRIPTOR.services_by_name["ElizaService"]

ElizaServiceSay_method_descriptor: MethodDescriptor = ElizaService_service_descriptor.methods_by_name["Say"]
ElizaServiceConverse_method_descriptor: MethodDescriptor = ElizaService_service_descriptor.methods_by_name["Converse"]
ElizaServiceIntroduceServer_method_descriptor: MethodDescriptor = ElizaService_service_descriptor.methods_by_name["IntroduceServer"]
ElizaServiceIntroduceClient_method_descriptor: MethodDescriptor = ElizaService_service_descriptor.methods_by_name["IntroduceClient"]


class ElizaClient:
    def __init__(self, base_url: str, session: AsyncClientSession, options: ClientOptions | None = None) -> None:
        base_url = base_url.removesuffix("/")

        self.Say = Client[SayRequest, SayResponse](
            session, base_url + ElizaServiceProcedures.Say.value, SayRequest, SayResponse, options
        ).call_unary
        self.Converse = Client[ConverseRequest, ConverseResponse](
            session, base_url + ElizaServiceProcedures.Converse.value, ConverseRequest, ConverseResponse, options
        ).call_server_stream
        self.IntroduceServer = Client[IntroduceRequest, IntroduceResponse](
            session, base_url + ElizaServiceProcedures.IntroduceServer.value, IntroduceRequest, IntroduceResponse, options
        ).call_server_stream
        self.IntroduceClient = Client[IntroduceRequest, IntroduceResponse](
            session, base_url + ElizaServiceProcedures.IntroduceClient.value, IntroduceRequest, IntroduceResponse, options
        ).call_client_stream


class ElizaServiceHandler:
    """Handler for the eliza service."""

    async def Say(self, request: UnaryRequest[SayRequest]) -> UnaryResponse[SayResponse]: ...

    async def Converse(self, request: StreamRequest[ConverseRequest]) -> StreamResponse[ConverseResponse]: ...

    async def IntroduceServer(self, request: StreamRequest[IntroduceRequest]) -> StreamResponse[IntroduceResponse]: ...

    async def IntroduceClient(self, request: StreamRequest[IntroduceRequest]) -> StreamResponse[IntroduceResponse]: ...


def create_ElizaService_handlers(service: ElizaServiceHandler, options: ConnectOptions | None = None) -> list[Handler]:
    handlers = [
        UnaryHandler(
            procedure=ElizaServiceProcedures.Say.value,
            unary=service.Say,
            input=SayRequest,
            output=SayResponse,
            options=options,
        ),
        ServerStreamHandler(
            procedure=ElizaServiceProcedures.Converse.value,
            stream=service.Converse,
            input=ConverseRequest,
            output=ConverseResponse,
            options=options,
        ),
        ServerStreamHandler(
            procedure=ElizaServiceProcedures.IntroduceServer.value,
            stream=service.IntroduceServer,
            input=IntroduceRequest,
            output=IntroduceResponse,
            options=options,
        ),
        ClientStreamHandler(
            procedure=ElizaServiceProcedures.IntroduceClient.value,
            stream=service.IntroduceClient,
            input=IntroduceRequest,
            output=IntroduceResponse,
            options=options,
        ),
    ]
    return handlers
