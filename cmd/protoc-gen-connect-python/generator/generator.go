// Copyright 2024 Gaudiy, Inc.
// SPDX-License-Identifier: Apache-2.0

// Package generator generates connnect service for python.
package generator

import (
	"fmt"
	"path/filepath"
	"runtime/debug"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/pluginpb"
)

var version = "devel"

type Config struct{}

type Generator struct {
	plugin *protogen.Plugin
	cfg    *Config
	local  map[protoreflect.FullName]bool
}

func NewGenerator(plugin *protogen.Plugin, cfg *Config) (*Generator, error) {
	plugin.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL) | uint64(pluginpb.CodeGeneratorResponse_FEATURE_SUPPORTS_EDITIONS)
	plugin.SupportedEditionsMinimum = descriptorpb.Edition_EDITION_PROTO2
	plugin.SupportedEditionsMaximum = descriptorpb.Edition_EDITION_2024

	local := make(map[protoreflect.FullName]bool)
	for _, f := range plugin.Files {
		if f.Generate {
			local[f.Desc.Package()] = true
		}
	}

	return &Generator{
		plugin: plugin,
		cfg:    cfg,
		local:  local,
	}, nil
}

func (gen *Generator) Generate() {
	for _, file := range gen.plugin.Files {
		if !file.Generate {
			continue
		}

		file.GoPackageName += "connect"
		generatedFilenamePrefix := filepath.ToSlash(file.GeneratedFilenamePrefix)
		file.GeneratedFilenamePrefix = filepath.Join(
			filepath.Dir(generatedFilenamePrefix),
			string(file.GoPackageName),
			filepath.Base(generatedFilenamePrefix),
		)

		// NOTE(zchee): importPath should be empty.
		importPath := protogen.GoImportPath(``)
		gf := gen.plugin.NewGeneratedFile(file.GeneratedFilenamePrefix+"_connect_pb2.py", importPath)

		gen.generate(gf, file)
	}
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}

	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}

	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

type GeneratedFile struct {
	*protogen.GeneratedFile

	config        *Config
	packages      map[protoreflect.FullName]bool
	manualImports map[PythonImportPath]bool
}

func (gen *Generator) generate(g *protogen.GeneratedFile, f *protogen.File) {
	p := &GeneratedFile{
		GeneratedFile: g,
		config:        gen.cfg,
		packages:      make(map[protoreflect.FullName]bool),
		manualImports: make(map[PythonImportPath]bool),
	}

	p.P(`# Generated by the protoc-gen-connect-python. DO NOT EDIT!`)
	p.P(`# source: `, f.GeneratedFilenamePrefix, `.proto`)
	p.P(`# Protobuf Python Version: `, protocVersion(gen.plugin))
	if bi, ok := debug.ReadBuildInfo(); ok {
		p.P(`# protoc-gen-connect-python version: `, bi.Main.Version)
	}
	p.P(`"""Generated connect code."""`)
	p.P()
	p.P(`import abc`)
	p.P(`from enum import Enum`)
	p.P()
	p.P(`from google.protobuf.descriptor import MethodDescriptor, ServiceDescriptor`)
	p.P()
	p.P(`from connect.handler import UnaryHandler`)
	p.P(`from connect.request import ConnectRequest`)
	p.P(`from connect.response import ConnectResponse`)
	svcName := filepath.Base(f.GeneratedFilenamePrefix)
	upperSvcName := camelCase(svcName)
	svcNameService := upperSvcName + `Service`
	importPB := svcName + "_pb2"
	p.P(`from `, f.Desc.Package(), ` import `, importPB)
	request := upperSvcName + "Request"
	response := upperSvcName + "Response"
	p.P(`from `, string(f.Desc.Package())+"."+importPB, ` import `, request, `, `, response)
	p.P()
	p.P()
	procedures := svcNameService + `Procedures`
	p.P(`class `, procedures, `(Enum)`, `:`)
	p.P(`    """Procedures for the `, svcName, ` service."""`)
	p.P()
	p.P(`    `, upperSvcName, ` = "/`, f.Desc.Package(), `.`+svcNameService+`/`, upperSvcName, `"`)
	p.P()
	p.P()
	serviceDescriptor := svcNameService + `_service_descriptor`
	p.P(serviceDescriptor, `: `, `ServiceDescriptor`, ` = `, importPB+`.DESCRIPTOR.services_by_name["`, svcNameService, `"]`)
	p.P()
	p.P(svcNameService, `_Ping_method_descriptor`, `: `, `MethodDescriptor`, ` = `, serviceDescriptor, `.methods_by_name["`, upperSvcName, `"]`)
	p.P()
	p.P()
	handler := svcNameService + `Handler`
	p.P(`class `, handler, `(metaclass=abc.ABCMeta)`, `:`)
	p.P(`    """Handler for the `, svcName, ` service."""`)
	p.P()
	p.P(`    @abc.abstractmethod`)
	p.P(`    async def `, upperSvcName, `(self, `, `request: ConnectRequest[`, request, `]) -> ConnectResponse[`, response, `]: ...`)
	p.P()
	p.P()
	proceduresMethod := procedures + `.` + upperSvcName
	p.P(`def create_`, svcNameService, `_handler`, `(service: `, handler, `)`, ` -> `, `list[UnaryHandler]:`)
	p.P(`    rpc_handlers = [`)
	p.P(`        UnaryHandler(`)
	p.P(`            `, proceduresMethod, `.value,`)
	p.P(`            service.`, upperSvcName, `,`)
	p.P(`            `, request, `,`)
	p.P(`            `, response, `,`)
	p.P(`        )`)
	p.P(`    ]`)
	p.P(`    return rpc_handlers`)
}

// camelCase camel-cases a protobuf name for use as a Go identifier.
func camelCase(s string) string {
	// Invariant: if the next letter is lower case, it must be converted
	// to upper case.
	// That is, we process a word at a time, where words are marked by _ or
	// upper case letter. Digits are treated as words.
	var b []byte
	for i := 0; i < len(s); i++ {
		c := s[i]
		switch {
		case c == '.' && i+1 < len(s) && isASCIILower(s[i+1]):
			// Skip over '.' in ".{{lowercase}}".
		case c == '.':
			b = append(b, '_') // convert '.' to '_'
		case c == '_' && (i == 0 || s[i-1] == '.'):
			// Convert initial '_' to ensure we start with a capital letter.
			// Do the same for '_' after '.' to match historic behavior.
			b = append(b, 'X') // convert '_' to 'X'
		case c == '_' && i+1 < len(s) && isASCIILower(s[i+1]):
			// Skip over '_' in "_{{lowercase}}".
		case isASCIIDigit(c):
			b = append(b, c)
		default:
			// Assume we have a letter now - if not, it's a bogus identifier.
			// The next word is a sequence of characters that must start upper case.
			if isASCIILower(c) {
				c -= 'a' - 'A' // convert lowercase to uppercase
			}
			b = append(b, c)

			// Accept lower case sequence that follows.
			for ; i+1 < len(s) && isASCIILower(s[i+1]); i++ {
				b = append(b, s[i+1])
			}
		}
	}
	return string(b)
}

func isASCIILower(c byte) bool {
	return 'a' <= c && c <= 'z'
}
func isASCIIUpper(c byte) bool {
	return 'A' <= c && c <= 'Z'
}
func isASCIIDigit(c byte) bool {
	return '0' <= c && c <= '9'
}
