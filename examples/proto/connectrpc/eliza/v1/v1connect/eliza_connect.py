# Generated by the protoc-gen-connect-python. DO NOT EDIT!
# source: examples/proto/connectrpc/eliza/v1/v1connect/eliza.proto
# Protobuf Python Version: v5.29.3
# protoc-gen-connect-python version: v0.0.0-20250225130907-52aad1ea4ad5
"""Generated connect code."""

from enum import Enum

from connect.client import Client
from connect.connect import StreamRequest, StreamResponse, UnaryRequest, UnaryResponse
from connect.connection_pool import AsyncConnectionPool
from connect.handler import ClientStreamHandler, Handler, ServerStreamHandler, UnaryHandler
from connect.options import ClientOptions, ConnectOptions
from google.protobuf.descriptor import MethodDescriptor, ServiceDescriptor

from .. import eliza_pb2
from ..eliza_pb2 import ConverseRequest, ConverseResponse, IntroduceRequest, IntroduceResponse, SayRequest, SayResponse


class ElizaServiceProcedures(Enum):
    """Procedures for the ElizaService service."""

    Say = "/connectrpc.eliza.v1.ElizaService/Say"
    Converse = "/connectrpc.eliza.v1.ElizaService/Converse"
    IntroduceServer = "/connectrpc.eliza.v1.ElizaService/IntroduceServer"
    IntroduceClient = "/connectrpc.eliza.v1.ElizaService/IntroduceClient"


ElizaService_service_descriptor: ServiceDescriptor = eliza_pb2.DESCRIPTOR.services_by_name["ElizaService"]

ElizaServiceSay_method_descriptor: MethodDescriptor = ElizaService_service_descriptor.methods_by_name["Say"]
ElizaServiceConverse_method_descriptor: MethodDescriptor = ElizaService_service_descriptor.methods_by_name["Converse"]
ElizaServiceIntroduceServer_method_descriptor: MethodDescriptor = ElizaService_service_descriptor.methods_by_name["IntroduceServer"]
ElizaServiceIntroduceClient_method_descriptor: MethodDescriptor = ElizaService_service_descriptor.methods_by_name["IntroduceClient"]


class ElizaServiceClient:
    def __init__(self, base_url: str, pool: AsyncConnectionPool, options: ClientOptions | None = None) -> None:
        base_url = base_url.removesuffix("/")

        self.Say = Client[SayRequest, SayResponse](
            pool, base_url + ElizaServiceProcedures.Say.value, SayRequest, SayResponse, options
        ).call_unary
        self.Converse = Client[ConverseRequest, ConverseResponse](
            pool, base_url + ElizaServiceProcedures.Converse.value, ConverseRequest, ConverseResponse, options
        ).call_server_stream
        self.IntroduceServer = Client[IntroduceRequest, IntroduceResponse](
            pool, base_url + ElizaServiceProcedures.IntroduceServer.value, IntroduceRequest, IntroduceResponse, options
        ).call_server_stream
        self.IntroduceClient = Client[IntroduceRequest, IntroduceResponse](
            pool, base_url + ElizaServiceProcedures.IntroduceClient.value, IntroduceRequest, IntroduceResponse, options
        ).call_client_stream


class ElizaServiceHandler:
    """Handler for the elizaService service."""

    async def Say(self, request: UnaryRequest[SayRequest]) -> UnaryResponse[SayResponse]: ...

    async def Converse(self, request: StreamRequest[ConverseRequest]) -> StreamResponse[ConverseResponse]: ...

    async def IntroduceServer(self, request: StreamRequest[IntroduceRequest]) -> StreamResponse[IntroduceResponse]: ...

    async def IntroduceClient(self, request: StreamRequest[IntroduceRequest]) -> StreamResponse[IntroduceResponse]: ...


def create_ElizaService_handlers(service: ElizaServiceHandler, options: ConnectOptions | None = None) -> list[Handler]:
    handlers = [
        UnaryHandler(
            procedure=ElizaServiceProcedures.Say.value,
            unary=service.Say,
            input=SayRequest,
            output=SayResponse,
            options=options,
        ),
        ServerStreamHandler(
            procedure=ElizaServiceProcedures.Converse.value,
            stream=service.Converse,
            input=ConverseRequest,
            output=ConverseResponse,
            options=options,
        ),
        ServerStreamHandler(
            procedure=ElizaServiceProcedures.IntroduceServer.value,
            stream=service.IntroduceServer,
            input=IntroduceRequest,
            output=IntroduceResponse,
            options=options,
        ),
        ClientStreamHandler(
            procedure=ElizaServiceProcedures.IntroduceClient.value,
            stream=service.IntroduceClient,
            input=IntroduceRequest,
            output=IntroduceResponse,
            options=options,
        ),
    ]
    return handlers
